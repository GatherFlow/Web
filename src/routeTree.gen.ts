/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard/route'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as DashboardProfileImport } from './routes/dashboard/profile'
import { Route as DashboardPrivacyImport } from './routes/dashboard/privacy'
import { Route as DashboardEventsImport } from './routes/dashboard/events'
import { Route as DashboardBillingImport } from './routes/dashboard/billing'
import { Route as authVerifyEmailImport } from './routes/(auth)/verify-email'
import { Route as authSignupImport } from './routes/(auth)/signup'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as authForgotPasswordRouteImport } from './routes/(auth)/forgot-password/route'
import { Route as authForgotPasswordIndexImport } from './routes/(auth)/forgot-password/index'
import { Route as authForgotPasswordCodeImport } from './routes/(auth)/forgot-password/code'
import { Route as authForgotPasswordChangeImport } from './routes/(auth)/forgot-password/change'

// Create/Update Routes

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardProfileRoute = DashboardProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardPrivacyRoute = DashboardPrivacyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardEventsRoute = DashboardEventsImport.update({
  id: '/events',
  path: '/events',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardBillingRoute = DashboardBillingImport.update({
  id: '/billing',
  path: '/billing',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const authVerifyEmailRoute = authVerifyEmailImport.update({
  id: '/(auth)/verify-email',
  path: '/verify-email',
  getParentRoute: () => rootRoute,
} as any)

const authSignupRoute = authSignupImport.update({
  id: '/(auth)/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const authForgotPasswordRouteRoute = authForgotPasswordRouteImport.update({
  id: '/(auth)/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRoute,
} as any)

const authForgotPasswordIndexRoute = authForgotPasswordIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => authForgotPasswordRouteRoute,
} as any)

const authForgotPasswordCodeRoute = authForgotPasswordCodeImport.update({
  id: '/code',
  path: '/code',
  getParentRoute: () => authForgotPasswordRouteRoute,
} as any)

const authForgotPasswordChangeRoute = authForgotPasswordChangeImport.update({
  id: '/change',
  path: '/change',
  getParentRoute: () => authForgotPasswordRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/forgot-password': {
      id: '/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/verify-email': {
      id: '/(auth)/verify-email'
      path: '/verify-email'
      fullPath: '/verify-email'
      preLoaderRoute: typeof authVerifyEmailImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/billing': {
      id: '/dashboard/billing'
      path: '/billing'
      fullPath: '/dashboard/billing'
      preLoaderRoute: typeof DashboardBillingImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/events': {
      id: '/dashboard/events'
      path: '/events'
      fullPath: '/dashboard/events'
      preLoaderRoute: typeof DashboardEventsImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/privacy': {
      id: '/dashboard/privacy'
      path: '/privacy'
      fullPath: '/dashboard/privacy'
      preLoaderRoute: typeof DashboardPrivacyImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/profile': {
      id: '/dashboard/profile'
      path: '/profile'
      fullPath: '/dashboard/profile'
      preLoaderRoute: typeof DashboardProfileImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/(auth)/forgot-password/change': {
      id: '/(auth)/forgot-password/change'
      path: '/change'
      fullPath: '/forgot-password/change'
      preLoaderRoute: typeof authForgotPasswordChangeImport
      parentRoute: typeof authForgotPasswordRouteImport
    }
    '/(auth)/forgot-password/code': {
      id: '/(auth)/forgot-password/code'
      path: '/code'
      fullPath: '/forgot-password/code'
      preLoaderRoute: typeof authForgotPasswordCodeImport
      parentRoute: typeof authForgotPasswordRouteImport
    }
    '/(auth)/forgot-password/': {
      id: '/(auth)/forgot-password/'
      path: '/'
      fullPath: '/forgot-password/'
      preLoaderRoute: typeof authForgotPasswordIndexImport
      parentRoute: typeof authForgotPasswordRouteImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteRouteChildren {
  DashboardBillingRoute: typeof DashboardBillingRoute
  DashboardEventsRoute: typeof DashboardEventsRoute
  DashboardPrivacyRoute: typeof DashboardPrivacyRoute
  DashboardProfileRoute: typeof DashboardProfileRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardBillingRoute: DashboardBillingRoute,
  DashboardEventsRoute: DashboardEventsRoute,
  DashboardPrivacyRoute: DashboardPrivacyRoute,
  DashboardProfileRoute: DashboardProfileRoute,
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

interface authForgotPasswordRouteRouteChildren {
  authForgotPasswordChangeRoute: typeof authForgotPasswordChangeRoute
  authForgotPasswordCodeRoute: typeof authForgotPasswordCodeRoute
  authForgotPasswordIndexRoute: typeof authForgotPasswordIndexRoute
}

const authForgotPasswordRouteRouteChildren: authForgotPasswordRouteRouteChildren =
  {
    authForgotPasswordChangeRoute: authForgotPasswordChangeRoute,
    authForgotPasswordCodeRoute: authForgotPasswordCodeRoute,
    authForgotPasswordIndexRoute: authForgotPasswordIndexRoute,
  }

const authForgotPasswordRouteRouteWithChildren =
  authForgotPasswordRouteRoute._addFileChildren(
    authForgotPasswordRouteRouteChildren,
  )

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/forgot-password': typeof authForgotPasswordRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/verify-email': typeof authVerifyEmailRoute
  '/dashboard/billing': typeof DashboardBillingRoute
  '/dashboard/events': typeof DashboardEventsRoute
  '/dashboard/privacy': typeof DashboardPrivacyRoute
  '/dashboard/profile': typeof DashboardProfileRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/forgot-password/change': typeof authForgotPasswordChangeRoute
  '/forgot-password/code': typeof authForgotPasswordCodeRoute
  '/forgot-password/': typeof authForgotPasswordIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/verify-email': typeof authVerifyEmailRoute
  '/dashboard/billing': typeof DashboardBillingRoute
  '/dashboard/events': typeof DashboardEventsRoute
  '/dashboard/privacy': typeof DashboardPrivacyRoute
  '/dashboard/profile': typeof DashboardProfileRoute
  '/dashboard': typeof DashboardIndexRoute
  '/forgot-password/change': typeof authForgotPasswordChangeRoute
  '/forgot-password/code': typeof authForgotPasswordCodeRoute
  '/forgot-password': typeof authForgotPasswordIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/(auth)/forgot-password': typeof authForgotPasswordRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/signup': typeof authSignupRoute
  '/(auth)/verify-email': typeof authVerifyEmailRoute
  '/dashboard/billing': typeof DashboardBillingRoute
  '/dashboard/events': typeof DashboardEventsRoute
  '/dashboard/privacy': typeof DashboardPrivacyRoute
  '/dashboard/profile': typeof DashboardProfileRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/(auth)/forgot-password/change': typeof authForgotPasswordChangeRoute
  '/(auth)/forgot-password/code': typeof authForgotPasswordCodeRoute
  '/(auth)/forgot-password/': typeof authForgotPasswordIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/forgot-password'
    | '/login'
    | '/signup'
    | '/verify-email'
    | '/dashboard/billing'
    | '/dashboard/events'
    | '/dashboard/privacy'
    | '/dashboard/profile'
    | '/dashboard/'
    | '/forgot-password/change'
    | '/forgot-password/code'
    | '/forgot-password/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/signup'
    | '/verify-email'
    | '/dashboard/billing'
    | '/dashboard/events'
    | '/dashboard/privacy'
    | '/dashboard/profile'
    | '/dashboard'
    | '/forgot-password/change'
    | '/forgot-password/code'
    | '/forgot-password'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/(auth)/forgot-password'
    | '/(auth)/login'
    | '/(auth)/signup'
    | '/(auth)/verify-email'
    | '/dashboard/billing'
    | '/dashboard/events'
    | '/dashboard/privacy'
    | '/dashboard/profile'
    | '/dashboard/'
    | '/(auth)/forgot-password/change'
    | '/(auth)/forgot-password/code'
    | '/(auth)/forgot-password/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  authForgotPasswordRouteRoute: typeof authForgotPasswordRouteRouteWithChildren
  authLoginRoute: typeof authLoginRoute
  authSignupRoute: typeof authSignupRoute
  authVerifyEmailRoute: typeof authVerifyEmailRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  authForgotPasswordRouteRoute: authForgotPasswordRouteRouteWithChildren,
  authLoginRoute: authLoginRoute,
  authSignupRoute: authSignupRoute,
  authVerifyEmailRoute: authVerifyEmailRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/(auth)/forgot-password",
        "/(auth)/login",
        "/(auth)/signup",
        "/(auth)/verify-email"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard/route.tsx",
      "children": [
        "/dashboard/billing",
        "/dashboard/events",
        "/dashboard/privacy",
        "/dashboard/profile",
        "/dashboard/"
      ]
    },
    "/(auth)/forgot-password": {
      "filePath": "(auth)/forgot-password/route.tsx",
      "children": [
        "/(auth)/forgot-password/change",
        "/(auth)/forgot-password/code",
        "/(auth)/forgot-password/"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(auth)/signup": {
      "filePath": "(auth)/signup.tsx"
    },
    "/(auth)/verify-email": {
      "filePath": "(auth)/verify-email.tsx"
    },
    "/dashboard/billing": {
      "filePath": "dashboard/billing.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/events": {
      "filePath": "dashboard/events.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/privacy": {
      "filePath": "dashboard/privacy.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/profile": {
      "filePath": "dashboard/profile.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    },
    "/(auth)/forgot-password/change": {
      "filePath": "(auth)/forgot-password/change.tsx",
      "parent": "/(auth)/forgot-password"
    },
    "/(auth)/forgot-password/code": {
      "filePath": "(auth)/forgot-password/code.tsx",
      "parent": "/(auth)/forgot-password"
    },
    "/(auth)/forgot-password/": {
      "filePath": "(auth)/forgot-password/index.tsx",
      "parent": "/(auth)/forgot-password"
    }
  }
}
ROUTE_MANIFEST_END */
